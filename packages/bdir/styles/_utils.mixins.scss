$dirs: (
  ltr: (
    dir: ltr,
    opposite-dir: rtl,
    start: left,
    end: right,
    transform-dir: 1,
    rotate-dir: 0,
  ),
  rtl: (
    dir: rtl,
    opposite-dir: ltr,
    start: right,
    end: left,
    transform-dir: -1,
    rotate-dir: -180,
  ),
);

@mixin encapsulation($encapsulation, $selector) {
  @if ($encapsulation) {
    :host-context(#{$selector}) & {
      @content;
    }
  } @else {
    #{$selector} & {
      @content;
    }
  }
}

@mixin property-horizontal-bdir(
  $propery,
  $value,
  $encapsulation: true,
  $start: true,
  $dirs: $dirs
) {
  @each $key, $map in $dirs {
    @include encapsulation($encapsulation, '*[dir=#{map_get($map, dir)}]') {
      @if ($start) {
        #{$propery}-#{map_get($map, start)}: $value;
      } @else {
        #{$propery}-#{map_get($map, end)}: $value;
      }
    }
  }
}

@mixin value-bdir($propery, $start: true, $encapsulation: true, $dirs: $dirs) {
  @each $key, $map in $dirs {
    @include encapsulation($encapsulation, '*[dir=#{map_get($map, dir)}]') {
      @if ($start) {
        #{$propery}: map_get($map, start);
      } @else {
        #{$propery}: map_get($map, end);
      }
    }
  }
}

@mixin position-bdir($value, $start, $encapsulation, $dirs: $dirs) {
  @each $key, $map in $dirs {
    @include encapsulation($encapsulation, '*[dir=#{map_get($map, dir)}]') {
      @if ($start) {
        #{map_get($map, start)}: $value;
      } @else {
        #{map_get($map, end)}: $value;
      }
    }
  }
}

@mixin transform-bdir($prop, $values, $encapsulation: true, $dirs: $dirs) {
  @each $key, $map in $dirs {
    $transformValues: '';
    @for $i from 1 through length($values) {
      $value: nth($values, $i);

      @if ($i == 1) {
        @if ($prop == rotate) {
          $transformValues: $value + map_get($map, rotate-dir);
        } @else {
          $transformValues: $value * map_get($map, transform-dir);
        }
      } @else {
        $transformValues: $transformValues + ', ' + $value;
      }
    }

    @include encapsulation($encapsulation, '*[dir=#{map_get($map, dir)}]') {
      transform: #{$prop + '(' + $transformValues + ')'};
    }
  }
}

@function inverse($values...) {
  $parsedValues: ();
  $result: ();

  @if (length($values) == 1) {
    @each $val in nth($values, 1) {
      $parsedValues: append($parsedValues, $val);
    }
  }

  @if (type-of($parsedValues) != 'list' or length($parsedValues) < 4) {
    @return $values;
  }

  @for $i from 1 through length($parsedValues) {
    $nextOrPrevIndex: if($i % 2 == 0, $i - 1, $i + 1);
    $nextOrPrev: nth($parsedValues, $nextOrPrevIndex);
    $result: append($result, $nextOrPrev);
  }

  @return $result;
}

@mixin inverse-values-bdir(
  $property,
  $encapsulation: true,
  $start: true,
  $values...
) {
  $result: ();

  @if (length($values) == 1) {
    @each $val in nth(nth($values, 1), 1) {
      $result: append($result, $val);
    }
    $values: $result;
  }

  @if (length($values) == 3 or length($values) == 0) {
    #{$property}: $values;
  } @else {
    @if (length($values) <= 2) {
      $top: nth($values, 1);
      $bottom: $top;

      @if (length($values) == 2) {
        $bottom: nth($values, 2);
      }

      @if ($start) {
        $values: #{$top} 0 0 #{$bottom};
      } @else {
        $values: 0 #{$top} #{$bottom} 0;
      }
    }
    @each $key, $map in $dirs {
      $dir: map_get($map, dir);
      @include encapsulation($encapsulation, '*[dir=#{$dir}]') {
        @if ($key == 'ltr') {
          #{$property}: $values;
        } @else {
          #{$property}: inverse($values);
        }
      }
    }
  }
}

@function remove($list, $value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, remove(nth($list, $i), $value, $recursive));
    } @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}
